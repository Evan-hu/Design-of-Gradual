<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    <!-- 要知道spring对实体bean的注入是 通过IOC的方式，控制反转。（inverse of control） -->  
    <!-- 使用 annotation 的注入实体bean-->
	<context:annotation-config/>        
	<!-- 在base-package 扫描写了 component的实体，然后再注入实体bean -->
	<context:component-scan base-package="com.designofgradual"/>
	
<!-- 数据库的配置 -->
	<!-- 使用EL表达式来读取 classpath 中的文件的数据-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean> 
	<!-- 声明了一个数据源的实体bean，用来装载连接数据库的详细信息。 -->
	<bean id="myDataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>  
	</bean>
	
	
<!-- 映射到实体 -->
	<bean id="sessionFactory" 
		  class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="myDataSource"/>
		<!-- 包扫描的方式加注解 -->
		<property name="packagesToScan">
			<list>
				<value>com.designofgradual.pojo</value>
			</list>
		</property> 

<!-- hibernate的配置 -->		
		<!-- hibernateProperties 是hibernate的属性设置，设置了hibernate的方言和是否显示执行的sql语句 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	
	<!-- 这里是hibernate的模板了，要知道得到session，开启事务，关闭事务，事务回滚，这些都是 模板的东西，然后
	hibernateTemplate就集成了这些相同的操作，我们只需要写操作数据库的代码就可以了-->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/> 
	</bean>
	
<!--下面全都是 spring Aop的编程文件的配置信息  -->
	
	<!-- 声明了一个hibernate事务的管理器，最重要的是集成了 sessionFactory实体 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 配置Advice(事务的传播特性) -->
	<!-- 这里是事务的建议，手动指定对方法的操作权限。把对方法的管理权交到了transaction(txManager)中 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
		<tx:method name="query*" propagation="REQUIRED"/>
		<tx:method name="add*" propagation="REQUIRED"/>
		<tx:method name="create*" propagation="REQUIRED"/>
		<tx:method name="delete*" propagation="REQUIRED"/>
		<tx:method name="update*" propagation="REQUIRED"/>
		<tx:method name="retrieve*" propagation="SUPPORTS" read-only="true"/>
		<tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务管理器应用的范围 -->
	<!-- 这里当然就是spring的第二个核心 aop，面向切面编程了 -->
	<!-- 声明了一个aop的配置信息，要对那些方法（pointcut）进行切面编程 -->
	<aop:config>
		<aop:pointcut id="affectMethods" expression="execution(* com.designofgradual.daoImpl.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="affectMethods"/>
	</aop:config>
	<!-- 声明式事务 管理方法结束-->
	
</beans>
